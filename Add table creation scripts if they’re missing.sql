USE  DataWarehouseAnalytics

--												EXPLORATORY DATA ANALYSIS

-- ALL DETAILS ABOUT 3 TABLES

SELECT * FROM gold.fact_sales

SELECT * FROM gold.dim_customers

SELECT * FROM gold.dim_products

-- TO SEE ALL TABLES IN DATABASE

SELECT * FROM INFORMATION_SCHEMA.COLUMNS

SELECT * FROM INFORMATION_SCHEMA.TABLES

--FIND DISTINCT DIMENSIONS

SELECT DISTINCT(customer_id),first_name,country,gender FROM gold.dim_customers;

SELECT DISTINCT(product_id),product_name,category,cost FROM gold.dim_products;

SELECT DISTINCT(category),subcategory,product_name FROM gold.dim_products
WHERE category IS NOT NULL
ORDER BY category ASC;

-- SUBCATEGORY AND ITS  PRODUCT COUNT

SELECT subcategory, COUNT(*) AS product_count
FROM gold.dim_products
GROUP BY subcategory
HAVING subcategory IS NOT NULL
ORDER BY product_count DESC;

--CATEGORY AND ITS SUBCATEGORY COUNT

SELECT category,COUNT(DISTINCT(subcategory)) AS Sub_count 
FROM gold.dim_products
WHERE category IS NOT NULL
GROUP BY category
ORDER BY Sub_count DESC;

SELECT DISTINCT(subcategory) FROM gold.dim_products;

-- ALL COUNTRIES CUSTOMER

SELECT  country ,COUNT(customer_id)AS total_customer FROM gold.dim_customers
GROUP BY country;

SELECT COUNT(DISTINCT customer_id)AS total_customer FROM gold.dim_customers;

--EXPLORE ALL CATEGORY, SUBCATEGORY AND PRODUCTS NAME

SELECT category,subcategory,product_name FROM gold.dim_products

--EARLIEST AND LATEST DATE 

SELECT MAX(create_date)AS Latest_date, MIN(create_date) AS Oldest_date FROM gold.dim_customers

--DATE DIFFERENCE

SELECT MAX(create_date)AS Latest_date, MIN(create_date) AS Oldest_date ,DATEDIFF(DAY,MIN(create_date),MAX(create_date)) AS No_Of_Day FROM gold.dim_customers

--YOUNG AND ELDEST CUSTOMER

SELECT  DATEDIFF(YEAR,MIN(birthdate),GETDATE())AS OldestCustomer,DATEDIFF(YEAR,MAX(birthdate),GETDATE())AS YoungestCustomer 
FROM gold.dim_customers

-- TOTAL SALES,QUANTITY AND AVERAGE PRICES

SELECT SUM(sales_amount) AS TotalSalesRate FROM gold.fact_sales

SELECT SUM(quantity) AS TotalItem FROM gold.fact_sales

SELECT AVG(price) AS AverageSalesRate FROM gold.fact_sales

--TOTAL NUMBER OF PRODUCTS, ORDERS AND CUSTOMERS


SELECT COUNT(DISTINCT product_key) AS TotalProducts FROM gold.fact_sales

SELECT COUNT(DISTINCT order_number) AS TotalOrders FROM gold.fact_sales

SELECT COUNT(DISTINCT customer_key) AS TotalCustomers FROM gold.fact_sales

--GENERATING REPORTS 


SELECT 'Total Sales' AS Measure_Name ,SUM(sales_amount) AS Measure_Value FROM gold.fact_sales
UNION ALL
SELECT 'Total Quantity' AS Measure_Name ,SUM(quantity) AS Measure_Value FROM gold.fact_sales
UNION ALL
SELECT 'Average Sales Rate' AS Measure_Name ,AVG(sales_amount) AS Measure_Value FROM gold.fact_sales
UNION ALL
SELECT 'Total Orders' AS Measure_Name , COUNT( order_number) AS Measure_Value FROM gold.fact_sales
UNION ALL
SELECT 'Total Products' AS Measure_Name , COUNT(product_name) AS Measure_Value FROM gold.dim_products
UNION ALL
SELECT 'Total Customer' AS Measure_Name , COUNT(DISTINCT customer_key) AS Measure_Value FROM gold.dim_customers

--CHECKING MAGNITUDE

--TOTAL CUSTOMER AROUND WORLD


SELECT 
    UPPER(country) AS Country_Name,
    COUNT(customer_key) AS Total_Customer
FROM gold.dim_customers
WHERE country IS NOT NULL AND country NOT IN ('N/A', '')
GROUP BY country
ORDER BY Total_Customer DESC


--GENDER OF TOTAL CUSTOMERS

SELECT 
    LOWER(gender) AS Gender,
    COUNT(customer_key) AS Total_Customer,
    CAST(100.0 * COUNT(customer_key) / SUM(COUNT(customer_key)) OVER () AS DECIMAL(5,2)) AS Percentage
FROM gold.dim_customers
WHERE gender NOT IN ('n/a')
GROUP BY gender
ORDER BY Total_Customer DESC;

--TOTAL PRODUCTS BY CATEGORY

SELECT 
	category,COUNT(DISTINCT subcategory) AS SubCategory_Count,COUNT(DISTINCT product_name) AS Product_Count
FROM gold.dim_products
WHERE category IS NOT NULL
GROUP BY category
ORDER BY Product_Count DESC

--AVERAGE COST IN EACH CATEGORY

SELECT 
	category,COUNT(DISTINCT subcategory) AS SubCategory_Count,COUNT(DISTINCT product_name) AS Product_Count,AVG(cost) AS Average_Cost
FROM gold.dim_products
WHERE category IS NOT NULL
GROUP BY category
ORDER BY Average_Cost DESC

--TOTAL REVENUE GENERATED BY EACH CATEGORY

SELECT 
	P.category,
	SUM(F.sales_amount) AS TotalSales
FROM gold.fact_sales F
LEFT JOIN gold.dim_products P
ON F.product_key = P.product_key
GROUP BY P.category
ORDER BY TotalSales

--TOTAL REVENUE GENERATED BY EACH CUSTOMER

SELECT 
	C.customer_id,
	C.first_name ,
	C.last_name,
	SUM(F.sales_amount) AS Total_Sales
FROM gold.dim_customers C
LEFT JOIN gold.fact_sales F
ON C.customer_key = F.customer_key
GROUP BY C.customer_id,C.first_name,C.last_name
ORDER BY Total_Sales DESC

--DISTRIBUTION OF SOLD ITEMS ACROSS COUNTRIES 

SELECT 
	C.country,
	SUM(F.sales_amount)AS Total_CountrySales,
	SUM(F.quantity) AS Total_Quantity
FROM gold.dim_customers C
LEFT JOIN gold.fact_sales F
ON C.customer_key = F.customer_key
WHERE C.country NOT IN ('n/a')
GROUP BY C.country
ORDER BY Total_Quantity DESC;

--RANKING ANALYSIS

--TOP 50 PRODUCTS THAT GENERATE HIGH REVENUE

SELECT TOP 50
	P.product_name,
	SUM(F.sales_amount) AS Sales_Amount

FROM gold.dim_products P
LEFT JOIN gold.fact_sales F
ON P.product_key = F.product_key
GROUP BY P.product_name
ORDER BY Sales_Amount DESC

--TOP 10 SUBCATEGORY THAT GENERATE HIGH REVENUE

SELECT TOP 10
	P.subcategory,
	SUM(F.sales_amount) AS Sales_Amount

FROM gold.dim_products P
LEFT JOIN gold.fact_sales F
ON P.product_key = F.product_key
GROUP BY P.subcategory
ORDER BY Sales_Amount DESC


--TOP 50 PRODUCTS THAT GENERATE LOW REVENUE

SELECT TOP 50
	P.product_name,
	SUM(F.sales_amount) AS Sales_Amount

FROM gold.dim_products P
LEFT JOIN gold.fact_sales F
ON P.product_key = F.product_key
WHERE sales_amount IS NOT  NULL
GROUP BY P.product_name
ORDER BY Sales_Amount 

--TOP 10 SUBCATEGORY THAT GENERATE LOW REVENUE

SELECT TOP 10
	P.subcategory,
	SUM(F.sales_amount) AS Sales_Amount

FROM gold.dim_products P
LEFT JOIN gold.fact_sales F
ON P.product_key = F.product_key
WHERE sales_amount  IS NOT NULL
GROUP BY P.subcategory
ORDER BY Sales_Amount 

--TOP 10 CUSTOMER MAKE HIGH ORDER

SELECT TOP 10
	C.customer_key,
	C.first_name,
	C.last_name,
	COUNT(F.order_number) AS Total_Order

FROM gold.dim_customers C
LEFT JOIN gold.fact_sales F
ON C.customer_key = F.customer_key
WHERE sales_amount IS NOT  NULL
GROUP BY 
	C.customer_key,
	C.first_name,
	C.last_name
ORDER BY Total_Order DESC

--TOP 10 CUSTOMER MAKE LOW ORDERS

SELECT TOP 10
	C.customer_key,
	C.first_name,
	C.last_name,
	COUNT(F.order_number) AS Total_Orders

FROM gold.dim_customers C
LEFT JOIN gold.fact_sales F
ON C.customer_key = F.customer_key
WHERE sales_amount IS NOT  NULL
GROUP BY 
	C.customer_key,
	C.first_name,
	C.last_name
ORDER BY Total_Orders 


-- SUBCATEGORY THAT DOES NOT GENERATE  REVENUE

SELECT 
	P.subcategory,
	SUM(F.sales_amount) AS Sales_Amount

FROM gold.dim_products P
LEFT JOIN gold.fact_sales F
ON P.product_key = F.product_key
WHERE sales_amount  IS  NULL
GROUP BY P.subcategory
ORDER BY Sales_Amount 

-- RANKING TOP 50 PRODUCTS

SELECT * FROM(
SELECT
	P.product_name,
	SUM(F.sales_amount) AS Sales_Amount,
	ROW_NUMBER() OVER(ORDER BY SUM(F.sales_amount) DESC) AS RankOfProducts
FROM gold.dim_products P
LEFT JOIN gold.fact_sales F
ON P.product_key = F.product_key
GROUP BY P.product_name
)T
WHERE RankOfProducts <= 50;

--													ADVANCE ANALYSIS

-- CHANGE OVER TIME

--DAYWISE TOTAL SALES

SELECT 
	order_date,
	SUM(sales_amount) AS Total_Sales,
	SUM(quantity) AS Total_Quantity,
	COUNT(DISTINCT customer_key)AS Total_Customer
FROM gold.fact_sales
WHERE order_date IS NOT NULL
GROUP BY order_date
ORDER BY order_date

--MONTHWISE TOTAL SALES

SELECT 
	YEAR(order_date)AS Order_Year,
	MONTH(order_date) AS Order_Month,
	SUM(sales_amount) AS Total_Sales,
	SUM(quantity) AS Total_Quantity,
	COUNT(DISTINCT customer_key)AS Total_Customer
FROM gold.fact_sales
WHERE order_date IS NOT NULL
GROUP BY YEAR(order_date),MONTH(order_date)
ORDER BY YEAR(order_date),Order_Month


--		OR


SELECT 
	DATETRUNC(MONTH,order_date) AS Order_Date,
	SUM(sales_amount) AS Total_Sales,
	SUM(quantity) AS Total_Quantity,
	COUNT(DISTINCT customer_key)AS Total_Customer
FROM gold.fact_sales
WHERE order_date IS NOT NULL
GROUP BY DATETRUNC(MONTH,order_date)
ORDER BY DATETRUNC(MONTH,order_date)

--			OR


SELECT 
	FORMAT(order_date,'yyyy-MMMM') AS Order_Month,
	SUM(sales_amount) AS Total_Sales,
	SUM(quantity) AS Total_Quantity,
	COUNT(DISTINCT customer_key)AS Total_Customer
FROM gold.fact_sales
WHERE order_date IS NOT NULL
GROUP BY FORMAT(order_date,'yyyy-MMMM')
ORDER BY FORMAT(order_date,'yyyy-MMMM')

--YEARWISE TOTAL SALES

SELECT 
	YEAR(order_date) AS Order_Year,
	SUM(sales_amount) AS Total_Sales,
	SUM(quantity) AS Total_Quantity,
	COUNT(DISTINCT customer_key)AS Total_Customer
FROM gold.fact_sales
WHERE order_date IS NOT NULL
GROUP BY YEAR(order_date)
ORDER BY Order_Year
 
 --CUMULATIVE ANALYSIS 

 --RUNNING TOTAL BY MONTHS

SELECT 
Order_Date,
Total_Sales,
SUM(Total_Sales) OVER (PARTITION BY Order_Date ORDER BY Order_Date) AS Running_Total
FROM(
	SELECT 
		DATETRUNC(MONTH,order_date) AS Order_Date,
		SUM(sales_amount) AS Total_Sales
	FROM gold.fact_sales
	WHERE order_date IS NOT NULL
	GROUP BY DATETRUNC(MONTH,order_date)
)T

--RUNNIG TOTAL BY YEARS 

SELECT 
Order_Date,
Total_Sales,
SUM(Total_Sales) OVER ( ORDER BY Order_Date) AS Running_Total,
AVG(Average_Price) OVER ( ORDER BY Order_Date) AS Moving_Average
FROM(
	SELECT 
		DATETRUNC(YEAR,order_date) AS Order_Date,
		SUM(sales_amount) AS Total_Sales,
		AVG(price) AS Average_Price
	FROM gold.fact_sales
	WHERE order_date IS NOT NULL
	GROUP BY DATETRUNC(YEAR,order_date)
)T

-- PERFORMANCE ANALYSIS 
WITH YEAR_WISE_CALCULATION AS(
	SELECT
		YEAR(F.order_date) AS Order_Year,
		P.product_name,
		SUM(F.sales_amount) AS Current_Sales
	FROM gold.fact_sales F
	LEFT JOIN gold.dim_products P
	ON F.product_key= P.product_key
	WHERE F.order_date IS NOT NULL
	GROUP BY YEAR(F.order_date),P.product_name
)

SELECT 
	Order_Year,
	product_name,
	Current_Sales,
	AVG(Current_Sales) OVER (PARTITION BY product_name)AS Average_Sales,
	Current_Sales - AVG(Current_Sales) OVER (PARTITION BY product_name) AS Diff_Average,
	CASE WHEN Current_Sales - AVG(Current_Sales) OVER (PARTITION BY product_name) > 0 THEN 'Above Average'
		 WHEN Current_Sales - AVG(Current_Sales) OVER (PARTITION BY product_name) < 0 THEN 'Below Average'
		 ELSE 'Same'
	END AS Change_AVG,
	LAG(Current_Sales) OVER(PARTITION BY product_name ORDER BY Order_Year )AS Prev_Year_Sale,
	Current_Sales - LAG(Current_Sales) OVER(PARTITION BY product_name ORDER BY Order_Year ) AS Sale_Year_Diff,
	CASE WHEN Current_Sales - LAG(Current_Sales) OVER(PARTITION BY product_name ORDER BY Order_Year ) > 0 THEN 'INCREASING'
		 WHEN Current_Sales - LAG(Current_Sales) OVER(PARTITION BY product_name ORDER BY Order_Year ) < 0 THEN 'DECREASING'
		 ELSE 'NO Prev Year'
	END AS Curr_VS_Pre
FROM YEAR_WISE_CALCULATION;

--PART TO WHOLE ANALYSIS


WITH CATEGORY_SALES AS (
	SELECT 
		P.category,
		SUM(F.sales_amount) Total_Sales
	FROM gold.fact_sales F
	LEFT JOIN gold.dim_products P
	ON F.product_key = P.product_key
	GROUP BY P.category
)


SELECT 
	category,
	Total_Sales,
	SUM(Total_Sales) OVER() AS Overall_Sales,
	CONCAT(ROUND((CAST(Total_Sales AS FLOAT) / SUM(Total_Sales) OVER()) * 100,2),'%') AS Sales_Percentage
FROM CATEGORY_SALES
ORDER BY Total_Sales DESC;

-- DATA SEGMENTATION

WITH DATA_SEGMENTATION AS (
SELECT 
	product_key,
	product_name,
	cost,
	CASE WHEN cost < 100 THEN 'Below 100'
		 WHEN cost BETWEEN 100 AND 500 THEN '100 - 500'
		 WHEN cost BETWEEN 500 AND 1000 THEN '500 - 1000'
		 ELSE 'Above 1000'
	END Cost_Range
FROM gold.dim_products
)

SELECT
	Cost_Range,
	COUNT(product_key) AS  Total_no_of_Products
FROM DATA_SEGMENTATION
GROUP BY Cost_Range
ORDER BY Total_no_of_Products DESC;


--IDENTIFING VIP,REGULAR AND NEW CUSTOMER


WITH CUSTOMER_DETAIL AS (
SELECT 
	C.customer_key,
	SUM(F.sales_amount) AS Spent_Amt,
	MIN(F.order_date) AS First_order_date,
	MAX(f.order_date) AS last_order_date
FROM gold.dim_customers C
LEFT JOIN gold.fact_sales F
ON C.customer_key = F.customer_key
GROUP BY C.customer_key
)

SELECT 
	COUNT(customer_key) AS Total_Customer,
	SUM(Spent_Amt)AS Total_Amt,
	Customer_Type
FROM(
	SELECT 
		customer_key,
		Spent_Amt,
		DATEDIFF(MONTH,First_order_date,last_order_date) AS Diff_months,
		CASE WHEN DATEDIFF(MONTH,First_order_date,last_order_date) >= 12 AND Spent_Amt >= 5000 THEN 'VIP'
		 WHEN DATEDIFF(MONTH,First_order_date,last_order_date) >= 12 AND Spent_Amt <= 5000 THEN 'Regular'
		 ELSE 'NewCustomer'
		END Customer_Type
	FROM CUSTOMER_DETAIL
)T
GROUP BY Customer_Type
ORDER BY Total_Customer DESC;



-- GENERATING REPORTS 

CREATE VIEW gold.customer_report AS

WITH BASE_DETAIL AS (
--1.RETRIVE UP BASE DETAILS 
	SELECT 
		F.order_number,
		F.product_key,
		F.order_date,
		F.sales_amount,
		F.quantity,
		C.customer_KEY,
		C.customer_number,
		DATEDIFF(YEAR,C.birthdate,GETDATE()) AS Age,
		CONCAT(C.first_name,' ', C.last_name) Full_Name
		FROM gold.dim_customers C
	LEFT JOIN gold.fact_sales F
	ON C.customer_key = F.customer_key
)

,CUSTOMER_AGGREGATION AS(
-- 2. AGGREGATE THE CUSTOMER DETAILS
	SELECT 
		customer_key,
		customer_number,
		Full_Name,
		Age,
		COUNT(DISTINCT order_number)AS Total_orders,
		COUNT(DISTINCT product_key)AS Total_Products,
		SUM(quantity) AS Total_Quantity,
		SUM(sales_amount)AS Total_Amt,
		MAX(order_date)AS Last_Order_date,
		DATEDIFF(MONTH,MIN(order_date),MAX(order_date))AS LifeSpan
	FROM BASE_DETAIL
	GROUP BY
		customer_key,
		customer_number,
		Full_Name,
		Age
)

SELECT
	customer_key,
	customer_number,
	Full_Name,
	Age,
	CASE WHEN Age <19 THEN 'TeenAgers'
		 WHEN Age BETWEEN 19 AND 30 THEN 'Age : 19 - 30'
		 WHEN Age BETWEEN 31 AND 50 THEN 'Age : 31 - 50'
		 WHEN Age BETWEEN 51 AND 75 THEN 'Age : 51 - 75'
		 ELSE '75 Above'
	END Age_Group ,
	CASE WHEN LifeSpan >= 12 AND Total_Amt >= 5000 THEN 'VIP'
		WHEN LifeSpan >= 12 AND Total_Amt <= 5000 THEN 'Regular'
		ELSE 'NewCustomer'
	END Customer_Type,
	Total_orders,
	Total_Products,
	Total_Quantity,
	Total_Amt,
	Last_Order_date,
	LifeSpan,
	
--	IDENTIFING KPIs

--	1.RECENCY TO FIND LAST ACTIVE CUSTOMERS

	DATEDIFF(MONTH,Last_Order_date,GETDATE())AS Recency,

--  2.AVERAGE AMOUNT
	CASE WHEN Total_orders = 0 THEN 0
	ELSE (Total_Amt / Total_orders)
	END AS Average_Amt,

--	3.TOTAL MONTH SPENDINGS
	CASE WHEN LifeSpan = 0 THEN Total_Amt
	ELSE (Total_Amt / LifeSpan)
	END AS Month_Spendings

FROM CUSTOMER_AGGREGATION

-- CHECKING VIEW IS CREATED OR NOT

SELECT * FROM gold.customer_report

IF OBJECT_ID('gold.report_products', 'V') IS NOT NULL
    DROP VIEW gold.report_products;
GO

CREATE VIEW gold.report_products AS

WITH base_query AS (
/*---------------------------------------------------------------------------
1) Base Query: Retrieves core columns from fact_sales and dim_products
---------------------------------------------------------------------------*/
    SELECT
	    f.order_number,
        f.order_date,
		f.customer_key,
        f.sales_amount,
        f.quantity,
        p.product_key,
        p.product_name,
        p.category,
        p.subcategory,
        p.cost
    FROM gold.fact_sales f
    LEFT JOIN gold.dim_products p
        ON f.product_key = p.product_key
    WHERE order_date IS NOT NULL  -- only consider valid sales dates
),

product_aggregations AS (
/*---------------------------------------------------------------------------
2) Product Aggregations: Summarizes key metrics at the product level
---------------------------------------------------------------------------*/
SELECT
    product_key,
    product_name,
    category,
    subcategory,
    cost,
    DATEDIFF(MONTH, MIN(order_date), MAX(order_date)) AS lifespan,
    MAX(order_date) AS last_sale_date,
    COUNT(DISTINCT order_number) AS total_orders,
	COUNT(DISTINCT customer_key) AS total_customers,
    SUM(sales_amount) AS total_sales,
    SUM(quantity) AS total_quantity,
	ROUND(AVG(CAST(sales_amount AS FLOAT) / NULLIF(quantity, 0)),1) AS avg_selling_price
FROM base_query

GROUP BY
    product_key,
    product_name,
    category,
    subcategory,
    cost
)

/*---------------------------------------------------------------------------
  3) Final Query: Combines all product results into one output
---------------------------------------------------------------------------*/
SELECT 
	product_key,
	product_name,
	category,
	subcategory,
	cost,
	last_sale_date,
	DATEDIFF(MONTH, last_sale_date, GETDATE()) AS recency_in_months,
	CASE
		WHEN total_sales > 50000 THEN 'High-Performer'
		WHEN total_sales >= 10000 THEN 'Mid-Range'
		ELSE 'Low-Performer'
	END AS product_segment,
	lifespan,
	total_orders,
	total_sales,
	total_quantity,
	total_customers,
	avg_selling_price,
	-- Average Order Revenue (AOR)
	CASE 
		WHEN total_orders = 0 THEN 0
		ELSE total_sales / total_orders
	END AS avg_order_revenue,

	-- Average Monthly Revenue
	CASE
		WHEN lifespan = 0 THEN total_sales
		ELSE total_sales / lifespan
	END AS avg_monthly_revenue

FROM product_aggregations 

-- CHECKING THE VIEW IS CREATED OR NOT

SELECT * FROM gold.report_products